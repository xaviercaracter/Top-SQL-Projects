package cs321.search;

import java.io.File;

public class GeneBankSearchBTreeArguments
{
    public final boolean useCache;
    public static String BTreeFileName;
    public static String queryFileName;
    public final int cacheSize;
    public final int debugLevel;

    public GeneBankSearchBTreeArguments(String[] args) {
        this.useCache = getCache(args[0]);
        this.BTreeFileName = getFileName(args[1]);
        this.queryFileName = getFileName(args[2]);
        if(useCache){
            this.cacheSize = getCacheSize(args[3]);
            this.debugLevel = getDebugLevel(args[4]);
        }else{
            this.cacheSize = 0;
            this.debugLevel = getDebugLevel(args[3]);
        }
    }

    private static void printUsage(String errorStr) {
        System.err.println(errorStr);
        System.err.println("java -jar build/libs/GeneBankSearchBTree.jar <0/1(no/with Cache)> <btree_file> <query_file> " +
                "[<cache_size>] [<debug_level>]");
        System.err.println("<0 (no cache) | 1 (cache)>: specifies whether the program should use cache (value 1) or    " +
                "no cache (value 0); if the value is 1, the <cache_size> has to be specified");
        System.err.println("< b-tree_file>: is the B-Tree file generated by the GeneBankCreateBTree program");
        System.err.println("<query file> contains all the DNA strings of a specific subsequence length that we want to " +
                "search for in the specified B-Tree file.");
        System.err.println("[<cache size>]: is an integer between 100 and 500 (inclusive) that represents the maximum " +
                "number of BTreeNode objects that can be stored in memory");
        System.err.println("[<debug level>]: 0 for standard output; 1 for additional files.");
        System.exit(1);
    }

    public boolean getCache(String c) {
        if (c != "1" && c != "0") {
            printUsage("Invalid cache selection");
        }
        if (!c.equals("0")) {
            return false;
        }else {
            return true;
        }
    }

    public int getCacheSize(String c) {
        return Integer.parseInt(c);
    }

    public int getDebugLevel(String c){
        int d = Integer.parseInt(c);
        if (d > 1 || d < 0) {
            printUsage("Invalid Debug Level Selection");
        }
        return  d;
    }

    private static void checkFiles(File bTreeFile, File queryFile){
        if(!bTreeFile.exists()){
            printUsage("BTree File: \"" + bTreeFile + "\" does not exist in specified path.");
        }
        if(!queryFile.exists()){
            printUsage("Query File: \"" + queryFile + "\" does not exist in specified path.");
        }
    }

    public String getFileName(String str){
        return str;
    }

    @Override
    public String toString(){
        return "GeneBankSearchBTreeArguments{" +
                "useCache=" + useCache +
                ", bTreeFileName='" + BTreeFileName + '\'' +
                ", queryFileName='" + queryFileName + '\'' +
                ", cacheSize=" + cacheSize +
                ", debugLevel=" + debugLevel +
                '}';
    }
}
