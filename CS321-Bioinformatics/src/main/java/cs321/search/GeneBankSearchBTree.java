package cs321.search;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class GeneBankSearchBTree
{
    public static final int MAX_SIZE = 20000;
    private static GeneBankSearchBTreeArguments a;
//    private static int useCache;
//    private static int cacheSize;
//    private static String BTreeFileName;
//    private static String queryFileName;
    private static int debugLevel = 0;
    private static QueryObject[] queries;

    public static void main(String[] args) throws Exception
    {
        if(args.length < 3 || args.length > 5){
            printUsage("Invalid Argument Number");
            return;
        }
        a = new GeneBankSearchBTreeArguments(args);

        /*useCache = Integer.parseInt(args[0]);
        if(useCache > 1 || useCache < 0){
            printUsage("");
            return;
        }
        if(useCache == 1){
            cacheSize = Integer.parseInt(args[3]);
        }else if (args.length == 5){
            debugLevel = Integer.parseInt(args[4]);
        }
        if(useCache == 0 && args.length == 4){
            debugLevel = Integer.parseInt(args[3]);
        }

        if (debugLevel > 1 || debugLevel < 0) {
            printUsage("");
            return;
        }

        //Create and Check Files
        BTreeFileName = args[1];
        queryFileName = args[2];*/

        File bTreeFile = new File(a.queryFileName);
        File queryFile = new File(a.BTreeFileName);
        checkFiles(bTreeFile, queryFile);

        //Create Query Array
        Scanner scanQuery = new Scanner(queryFile);
        String str;
        int i = 0;
        int k = 0; //sequence length
        queries = new QueryObject[MAX_SIZE];
        while (scanQuery.hasNextLine()) {
            str = scanQuery.nextLine();
            queries[i] = new QueryObject(k, str);
            i++;
        }
        scanQuery.close();

        //Search BTree
        SearchBTree(queries, bTreeFile);

        results(debugLevel);
    }

    private static void printUsage(String errorStr) {
        System.err.println(errorStr);
        System.err.println("java -jar build/libs/GeneBankSearchBTree.jar <0/1(no/with Cache)> <btree_file> <query_file> " +
                            "[<cache_size>] [<debug_level>]");
        System.err.println("<0 (no cache) | 1 (cache)>: specifies whether the program should use cache (value 1) or    " +
                            "no cache (value 0); if the value is 1, the <cache_size> has to be specified");
        System.err.println("< b-tree_file>: is the B-Tree file generated by the GeneBankCreateBTree program");
        System.err.println("<query file> contains all the DNA strings of a specific subsequence length that we want to " +
                            "search for in the specified B-Tree file.");
        System.err.println("[<cache size>]: is an integer between 100 and 500 (inclusive) that represents the maximum " +
                            "number of BTreeNode objects that can be stored in memory");
        System.err.println("[<debug level>]: 0 for standard output; 1 for additional files.");
        System.exit(1);

    }

    private static void checkFiles(File bTreeFile, File queryFile){
        if(!bTreeFile.exists()){
            printUsage("BTree File: \"" + bTreeFile + "\" does not exist in specified path.");
        }
        if(!queryFile.exists()){
            printUsage("Query File: \"" + queryFile + "\" does not exist in specified path.");
        }
    }

    private static void results(int debugLevel) {
        try {
            if (debugLevel == 1) {
                debugOutput();
            }
        } catch (IOException e) {
            System.out.println("Error writing to file.");
        }
    }

    private static void SearchBTree(QueryObject[] queries, File bTree) throws Exception{
        //TODO: Finish Search Implementation
        int count = 0;
        //int i = 1;
        String bTreeString;
        Scanner scanBTree = new Scanner(bTree);
        while (scanBTree.hasNextLine()) {
            bTreeString = scanBTree.nextLine();
            for (int i = 0; i < MAX_SIZE; i++) {
                if(queries[i].getGene().equals(bTreeString)) {
                    count++;
                }
            }
            System.out.println(queries.toString()+ ": " + count);
        }
    }

    private static void debugOutput() throws IOException{
        FileWriter fileWriter = new FileWriter("Query Dump");
        for (int i = 0; i < MAX_SIZE; i++) {
            if (queries[i].getGene() != "") {
                fileWriter.write(queries[i].toString());
            }
        }
        fileWriter.close();
    }
}

